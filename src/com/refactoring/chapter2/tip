一.为何重构？

    1.改善软件设计

    当人们只为短期的目的，或者在完全理解整体设计之前，就贸然修改代码，程序将逐渐
    失去自己的结构。程序员越来越难通过阅读源码而理解原来的设计。越难看出代码所代表
    的设计意图，就越难保护其设计，于是该设计就腐败的越快。

    完成同样一件事，设计不良的程序往往需要更多的代码，这常常是因为代码在不同的地方使用了
    完全相同的语句做同样的事。因此改进设计的一个重要方向话就是消除重复代码。代码越多，正确
    的修改就越困难，因为有很多代码需要理解，你在这里做了点修改，系统却不如预期那样工作，
    是因为你没有修改另一处。如果消除重复代码，你可以确定所有事物和行为在代码中只表述一次。
    这是优秀的设计的根本。

    2.使软件更容易理解

    重构能够使你更好理解代码的设计，使代码更好的表达自己的用途，核心是准确说出我想要的。

    3.重构帮助找到bug

    4.重构提高编程的速度

    友好的设计是快速开发的根本，或许某一段时间内你的进展迅速，但是恶略的设计很快就让
    你的速度慢下来。修改时间会越来越长，因为你必须花越来越多时间去理解系统、寻找重复代码
    大部分时间花在调试上面。


 二.何时重构

    不应为了重构而重构，之所以重构是因为重构可以帮助你把那些事做好。
    第一此做某件事时只管去做，第二次做类似的事会产生反感，但无论如何还是
    可以去做，第三次再做类似的事，你就应该重构了。（三次法则）

    1.添加新功能时重构
    当代码的设计无法帮助我轻松添加我需要的特性。如果用某种方式来设计，
    添加特性会简单的多。

    2.修补错误时重构
    如果收到一份错误报告，这就是需要重构的信号，因为显然代码还不够清晰--没有清晰到
    让你一眼看出bug。

    3.复审代码时重构
    复审有助于在开发团队中传播知识，也有助于让比较有经验的开发者把知识
    传递给他人。
    我的代码也许对我自己来说很清晰，对他人则不然。

    难以阅读的程序-->容易阅读
    逻辑重复的程序-->所有逻辑都在唯一地点指定
    新的改动不会危及现有逻辑
    带有复杂的条件逻辑程序-->尽可能简单表达条件逻辑


 三.间接层和重构

    1.允许逻辑共享

    2.分开解释意图和实现

    3.隔离变化
    可能我需要在两个不同地点使用同一个对象，其中一个地点我想改变对象的行为，
    但是如果我修改了他，我就要冒同时影响两处的风险，为此我可以做出一个子类，并在
    需要修改处引用这个子类。

    4.封装条件逻辑
    对象有一种奇妙的机制：多态消息，可以灵活而清晰的表达条件逻辑。将条件逻辑
    转为消息形式，往往能降低代码的重复和提高代码的弹性。